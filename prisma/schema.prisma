datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String        @id @default(cuid())
  name                  String?
  username              String?       @unique
  email                 String?       @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  createdCommunities    Community[]
  posts                 Post[]
  comments              Comment[]
  postVotes             PostVote[]
  commentVotes          CommentVote[]
  subscribedCommunities Subscribers[]
}

model Community {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  creator     User          @relation(fields: [creatorId], references: [id])
  creatorId   String
  name        String        @unique
  posts       Post[]
  subscribers Subscribers[]

  // Creates a database index to speed up querying
  @@index([name])
  @@index([creatorId])
}

model Post {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  title       String
  community   Community  @relation(fields: [communityId], references: [id])
  communityId String
  content     Json?
  comments    Comment[]
  votes       PostVote[]

  @@index([authorId])
  @@index([communityId])
}

model Comment {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  author    User          @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post          @relation(fields: [postId], references: [id])
  postId    String
  content   String
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId String?
  replies   Comment[]     @relation("ReplyTo")
  votes     CommentVote[]

  @@index([authorId])
  @@index([postId])
  @@index([replyToId])
}

model Subscribers {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String

  // Defines a composite key on the model instead of having a primary key
  @@id([userId, communityId])
  @@index([userId])
  @@index([communityId])
}

enum VoteType {
  UP
  DOWN
}

model PostVote {
  voter   User     @relation(fields: [voterId], references: [id])
  voterId String
  post    Post     @relation(fields: [postId], references: [id])
  postId  String
  vote    VoteType

  @@id([voterId, postId])
  @@index([postId])
  @@index([voterId])
}

model CommentVote {
  voter     User     @relation(fields: [voterId], references: [id])
  voterId   String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  vote      VoteType

  @@id([voterId, commentId])
  @@index([voterId])
  @@index([commentId])
}
